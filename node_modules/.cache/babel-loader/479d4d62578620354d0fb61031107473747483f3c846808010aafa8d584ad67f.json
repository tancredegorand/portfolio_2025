{"ast":null,"code":"var _jsxFileName = \"/Users/tancredegorand/Documents/TANCREDE/1-LOCAL/Portfolio/portfolio_2025/src/context/LanguageContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\n\n// Créer le contexte\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LanguageContext = /*#__PURE__*/createContext();\n\n// Créer un hook personnalisé pour utiliser le contexte\nexport const useLanguage = () => {\n  _s();\n  return useContext(LanguageContext);\n};\n\n// Provider du contexte de langue\n_s(useLanguage, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const LanguageProvider = ({\n  children\n}) => {\n  _s2();\n  // Récupérer la langue depuis localStorage ou utiliser 'fr' par défaut\n  const [language, setLanguage] = useState(localStorage.getItem('language') || 'fr');\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Fonction pour changer la langue\n  const toggleLanguage = () => {\n    const newLang = language === 'fr' ? 'eng' : 'fr';\n    setLanguage(newLang);\n    localStorage.setItem('language', newLang);\n  };\n\n  // Charger les données selon la langue\n  useEffect(() => {\n    setLoading(true);\n    // Récupérer le fichier JSON correspondant à la langue\n    import(`../data/data_${language}.json`).then(importedData => {\n      setData(importedData.default);\n      setLoading(false);\n    }).catch(error => {\n      console.error(\"Erreur lors du chargement des données:\", error);\n      setLoading(false);\n    });\n  }, [language]);\n  return /*#__PURE__*/_jsxDEV(LanguageContext.Provider, {\n    value: {\n      language,\n      toggleLanguage,\n      data,\n      loading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s2(LanguageProvider, \"ftJgr7+6ML5wQ1lez3HjICMY3+I=\");\n_c = LanguageProvider;\nvar _c;\n$RefreshReg$(_c, \"LanguageProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","LanguageContext","useLanguage","_s","LanguageProvider","children","_s2","language","setLanguage","localStorage","getItem","data","setData","loading","setLoading","toggleLanguage","newLang","setItem","then","importedData","default","catch","error","console","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tancredegorand/Documents/TANCREDE/1-LOCAL/Portfolio/portfolio_2025/src/context/LanguageContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\n\n// Créer le contexte\nexport const LanguageContext = createContext();\n\n// Créer un hook personnalisé pour utiliser le contexte\nexport const useLanguage = () => useContext(LanguageContext);\n\n// Provider du contexte de langue\nexport const LanguageProvider = ({ children }) => {\n  // Récupérer la langue depuis localStorage ou utiliser 'fr' par défaut\n  const [language, setLanguage] = useState(localStorage.getItem('language') || 'fr');\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Fonction pour changer la langue\n  const toggleLanguage = () => {\n    const newLang = language === 'fr' ? 'eng' : 'fr';\n    setLanguage(newLang);\n    localStorage.setItem('language', newLang);\n  };\n\n  // Charger les données selon la langue\n  useEffect(() => {\n    setLoading(true);\n    // Récupérer le fichier JSON correspondant à la langue\n    import(`../data/data_${language}.json`)\n      .then(importedData => {\n        setData(importedData.default);\n        setLoading(false);\n      })\n      .catch(error => {\n        console.error(\"Erreur lors du chargement des données:\", error);\n        setLoading(false);\n      });\n  }, [language]);\n\n  return (\n    <LanguageContext.Provider value={{ language, toggleLanguage, data, loading }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;;AAE7E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,eAAe,gBAAGN,aAAa,CAAC,CAAC;;AAE9C;AACA,OAAO,MAAMO,WAAW,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMN,UAAU,CAACI,eAAe,CAAC;AAAA;;AAE5D;AAAAE,EAAA,CAFaD,WAAW;AAGxB,OAAO,MAAME,gBAAgB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAChD;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAACa,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC;EAClF,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACiB,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACA,MAAMmB,cAAc,GAAGA,CAAA,KAAM;IAC3B,MAAMC,OAAO,GAAGT,QAAQ,KAAK,IAAI,GAAG,KAAK,GAAG,IAAI;IAChDC,WAAW,CAACQ,OAAO,CAAC;IACpBP,YAAY,CAACQ,OAAO,CAAC,UAAU,EAAED,OAAO,CAAC;EAC3C,CAAC;;EAED;EACAlB,SAAS,CAAC,MAAM;IACdgB,UAAU,CAAC,IAAI,CAAC;IAChB;IACA,MAAM,CAAC,gBAAgBP,QAAQ,OAAO,CAAC,CACpCW,IAAI,CAACC,YAAY,IAAI;MACpBP,OAAO,CAACO,YAAY,CAACC,OAAO,CAAC;MAC7BN,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC,CACDO,KAAK,CAACC,KAAK,IAAI;MACdC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;MAC9DR,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;EACN,CAAC,EAAE,CAACP,QAAQ,CAAC,CAAC;EAEd,oBACEP,OAAA,CAACC,eAAe,CAACuB,QAAQ;IAACC,KAAK,EAAE;MAAElB,QAAQ;MAAEQ,cAAc;MAAEJ,IAAI;MAAEE;IAAQ,CAAE;IAAAR,QAAA,EAC1EA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B,CAAC;AAACvB,GAAA,CAjCWF,gBAAgB;AAAA0B,EAAA,GAAhB1B,gBAAgB;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}