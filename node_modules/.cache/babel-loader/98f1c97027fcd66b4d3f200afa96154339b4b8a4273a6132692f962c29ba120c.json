{"ast":null,"code":"var _jsxFileName = \"/Users/tancredegorand/Documents/TANCREDE/1-LOCAL/Portfolio/portfolio_2025/src/component/BannerTitle.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BannerTitleContent = ({\n  numItem,\n  numTranslate,\n  text\n}) => {\n  _s();\n  const textRef = useRef(null);\n  const [dynamicSpacing, setDynamicSpacing] = useState(210); // Valeur par défaut\n\n  useEffect(() => {\n    if (textRef.current) {\n      const wordWidth = textRef.current.offsetWidth; // Récupère la largeur du texte\n      setDynamicSpacing(wordWidth + 5); // Ajuste l'espacement basé sur la largeur\n    }\n  }, [text]); // Recalculer si le texte change\n\n  // Condition modifiée : true pour translate1 et translate3, false pour translate2\n  const applyLeftStyle = numTranslate !== 'translate2';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `bannerTitleContent ${numItem} ${numTranslate}`,\n    style: applyLeftStyle ? {\n      left: `max(calc(${dynamicSpacing}px * 10), 100%)`\n    } : {\n      right: `max(calc(${dynamicSpacing}px * 10), 100%)`\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      ref: textRef,\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n};\n_s(BannerTitleContent, \"W4Jdhe9pI0e52ACcPcoCnNdNJ2o=\");\n_c = BannerTitleContent;\nconst BannerTitle = ({\n  numTranslate\n}) => {\n  const nbItem = 10;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `bannerTitle`,\n    children: [...Array(nbItem)].map((_, index) => /*#__PURE__*/_jsxDEV(BannerTitleContent, {\n      numItem: `item${index + 1}`,\n      numTranslate: numTranslate,\n      text: \"testesteste\"\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n_c2 = BannerTitle;\nexport default BannerTitle;\nvar _c, _c2;\n$RefreshReg$(_c, \"BannerTitleContent\");\n$RefreshReg$(_c2, \"BannerTitle\");","map":{"version":3,"names":["useEffect","useRef","useState","jsxDEV","_jsxDEV","BannerTitleContent","numItem","numTranslate","text","_s","textRef","dynamicSpacing","setDynamicSpacing","current","wordWidth","offsetWidth","applyLeftStyle","className","style","left","right","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","BannerTitle","nbItem","Array","map","_","index","_c2","$RefreshReg$"],"sources":["/Users/tancredegorand/Documents/TANCREDE/1-LOCAL/Portfolio/portfolio_2025/src/component/BannerTitle.js"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\n\nconst BannerTitleContent = ({ numItem, numTranslate, text }) => {\n    const textRef = useRef(null);\n    const [dynamicSpacing, setDynamicSpacing] = useState(210); // Valeur par défaut\n\n    useEffect(() => {\n        if (textRef.current) {\n            const wordWidth = textRef.current.offsetWidth; // Récupère la largeur du texte\n            setDynamicSpacing(wordWidth + 5); // Ajuste l'espacement basé sur la largeur\n        }\n    }, [text]); // Recalculer si le texte change\n\n    // Condition modifiée : true pour translate1 et translate3, false pour translate2\n    const applyLeftStyle = numTranslate !== 'translate2';\n\n    return (\n        <div\n            className={`bannerTitleContent ${numItem} ${numTranslate}`}\n            style={\n                applyLeftStyle\n                    ? { left: `max(calc(${dynamicSpacing}px * 10), 100%)` }\n                    : { right: `max(calc(${dynamicSpacing}px * 10), 100%)` }\n            }\n        >\n            <span></span>\n            <p ref={textRef}>{text}</p>\n        </div>\n    );\n};\nconst BannerTitle = ({numTranslate}) => {\n    const nbItem = 10; \n    return (\n        <div className={`bannerTitle`}>\n            {[...Array(nbItem)].map((_, index) => (\n                <BannerTitleContent key={index} numItem={`item${index + 1}`} numTranslate={numTranslate} text=\"testesteste\" />\n            ))}\n        </div>\n    );\n};\n\nexport default BannerTitle;"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,kBAAkB,GAAGA,CAAC;EAAEC,OAAO;EAAEC,YAAY;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC5D,MAAMC,OAAO,GAAGT,MAAM,CAAC,IAAI,CAAC;EAC5B,MAAM,CAACU,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;;EAE3DF,SAAS,CAAC,MAAM;IACZ,IAAIU,OAAO,CAACG,OAAO,EAAE;MACjB,MAAMC,SAAS,GAAGJ,OAAO,CAACG,OAAO,CAACE,WAAW,CAAC,CAAC;MAC/CH,iBAAiB,CAACE,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;IACtC;EACJ,CAAC,EAAE,CAACN,IAAI,CAAC,CAAC,CAAC,CAAC;;EAEZ;EACA,MAAMQ,cAAc,GAAGT,YAAY,KAAK,YAAY;EAEpD,oBACIH,OAAA;IACIa,SAAS,EAAE,sBAAsBX,OAAO,IAAIC,YAAY,EAAG;IAC3DW,KAAK,EACDF,cAAc,GACR;MAAEG,IAAI,EAAE,YAAYR,cAAc;IAAkB,CAAC,GACrD;MAAES,KAAK,EAAE,YAAYT,cAAc;IAAkB,CAC9D;IAAAU,QAAA,gBAEDjB,OAAA;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,eACbrB,OAAA;MAAGsB,GAAG,EAAEhB,OAAQ;MAAAW,QAAA,EAAEb;IAAI;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1B,CAAC;AAEd,CAAC;AAAChB,EAAA,CA3BIJ,kBAAkB;AAAAsB,EAAA,GAAlBtB,kBAAkB;AA4BxB,MAAMuB,WAAW,GAAGA,CAAC;EAACrB;AAAY,CAAC,KAAK;EACpC,MAAMsB,MAAM,GAAG,EAAE;EACjB,oBACIzB,OAAA;IAAKa,SAAS,EAAE,aAAc;IAAAI,QAAA,EACzB,CAAC,GAAGS,KAAK,CAACD,MAAM,CAAC,CAAC,CAACE,GAAG,CAAC,CAACC,CAAC,EAAEC,KAAK,kBAC7B7B,OAAA,CAACC,kBAAkB;MAAaC,OAAO,EAAE,OAAO2B,KAAK,GAAG,CAAC,EAAG;MAAC1B,YAAY,EAAEA,YAAa;MAACC,IAAI,EAAC;IAAa,GAAlFyB,KAAK;MAAAX,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAA+E,CAChH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAACS,GAAA,GATIN,WAAW;AAWjB,eAAeA,WAAW;AAAC,IAAAD,EAAA,EAAAO,GAAA;AAAAC,YAAA,CAAAR,EAAA;AAAAQ,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}