{"ast":null,"code":"var _jsxFileName = \"/Users/tancredegorand/Documents/TANCREDE/1-LOCAL/Portfolio/portfolio_2025/src/component/Menu_page.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from \"react\";\nimport data from '../data/data.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Split1 = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"split1\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Cliquez pour d\\xE9couvrir\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 9\n  }, this);\n};\n_c = Split1;\nconst Menu_page_item = ({\n  titre\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"menu_page_item\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: titre\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, this);\n};\n_c2 = Menu_page_item;\nconst Menu_page = () => {\n  _s();\n  const menuRef = useRef(null);\n  const [scrollY, setScrollY] = useState(0);\n  const [isVisible, setIsVisible] = useState(false); // État pour savoir si le composant est visible\n\n  // Récupérer les sections depuis le JSON\n  const sections = data.fr.sections;\n\n  // Création des refs pour chaque carrousel\n  const carouselRefs = useRef(sections.map(() => /*#__PURE__*/React.createRef()));\n\n  // Gestion du scrollY pour déplacer les carrousels seulement si le composant est visible\n  useEffect(() => {\n    const handleScroll = () => {\n      if (isVisible) {\n        // Ne mettre à jour scrollY que si le composant est visible\n        setScrollY(window.scrollY);\n      }\n    };\n    window.addEventListener('scroll', handleScroll);\n\n    // Nettoyage de l'événement de scroll à la destruction du composant\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, [isVisible]); // L'effet dépend de isVisible\n\n  useEffect(() => {\n    // Initialiser l'IntersectionObserver pour détecter la visibilité du composant\n    const observer = new IntersectionObserver(([entry]) => {\n      if (entry.isIntersecting) {\n        // Le composant Menu_page est visible, on active la logique de défilement\n        setIsVisible(true);\n      } else {\n        // Le composant Menu_page est hors de l'écran, on désactive le défilement\n        setIsVisible(false);\n      }\n    }, {\n      threshold: 0.5\n    } // Déclenche lorsque 50% du composant est visible\n    );\n    if (menuRef.current) {\n      observer.observe(menuRef.current); // Observer le composant Menu_page\n    }\n\n    // Nettoyage de l'observer lors du démontage du composant\n    return () => {\n      if (menuRef.current) {\n        observer.unobserve(menuRef.current);\n      }\n    };\n  }, []);\n  useEffect(() => {\n    // Appliquer un décalage horizontal basé sur scrollY à chaque carrousel\n    carouselRefs.current.forEach((ref, index) => {\n      if (ref.current) {\n        const offset = index * 100; // Crée un effet de décalage en fonction de l'index\n        const translateXValue = -scrollY + offset;\n        ref.current.style.transform = `translateX(${translateXValue}px)`;\n      }\n    });\n  }, [scrollY, sections]); // L'effet se déclenche à chaque changement de scrollY ou sections\n\n  const handleMouseOver = index => {\n    // Mettre opacité à 0.7 pour tous les carrousels sauf celui survolé\n    carouselRefs.current.forEach((ref, i) => {\n      if (ref.current && i !== index) {\n        ref.current.style.opacity = '0.7';\n      }\n    });\n  };\n  const handleMouseOut = () => {\n    // Rétablir l'opacité à 1 pour tous les carrousels\n    carouselRefs.current.forEach(ref => {\n      if (ref.current) {\n        ref.current.style.opacity = '1';\n      }\n    });\n  };\n  useEffect(() => {\n    // Ajouter les événements de survol et de sortie pour chaque carrousel\n    carouselRefs.current.forEach((ref, index) => {\n      if (ref.current) {\n        ref.current.addEventListener('mouseover', () => handleMouseOver(index));\n        ref.current.addEventListener('mouseout', handleMouseOut);\n      }\n    });\n\n    // Nettoyage des événements lors du démontage du composant\n    return () => {\n      carouselRefs.current.forEach((ref, index) => {\n        if (ref.current) {\n          ref.current.removeEventListener('mouseover', () => handleMouseOver(index));\n          ref.current.removeEventListener('mouseout', handleMouseOut);\n        }\n      });\n    };\n  }, [sections]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"menu_page\",\n    ref: menuRef,\n    children: [/*#__PURE__*/_jsxDEV(Split1, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this), sections.map((section, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"carrousel\",\n        ref: carouselRefs.current[index] // Référence assignée\n        ,\n        id: section.titre,\n        children: Array(12).fill(null).map((_, i) => /*#__PURE__*/_jsxDEV(Menu_page_item, {\n          titre: section.titre\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 21\n      }, this), index < sections.length - 1 && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"split2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 53\n      }, this)]\n    }, section.titre, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(Split1, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 9\n  }, this);\n};\n_s(Menu_page, \"5QyrdCvo/08WhaxeKEDn1qoSpHk=\");\n_c3 = Menu_page;\nexport default Menu_page;\n\n// import React, { useRef, useEffect } from \"react\";\n// import data from '../data/data.json';\n\n// const Split1 = () => {\n//     return (\n//         <div className=\"split1\">\n//             <span></span>\n//             <p>Cliquez pour découvrir</p>\n//             <span></span>\n//         </div>\n//     );\n// };\n\n// const Menu_page_item = ({ titre }) => {\n//     return (\n//         <div className='menu_page_item'>\n//             <span></span>\n//             <p>{titre}</p>\n//         </div>\n//     );\n// };\n\n// const Menu_page = () => {\n//     const menuRef = useRef(null);\n\n//     // Récupérer les sections depuis le JSON\n//     const sections = data.fr.sections;\n\n//     // Création des refs pour chaque carrousel\n//     const carouselRefs = useRef(sections.map(() => React.createRef()));\n\n//     useEffect(() => {\n//         const handleMouseOver = (index) => {\n//             // Mettre opacité à 0.7 pour tous les carrousels sauf celui survolé\n//             carouselRefs.current.forEach((ref, i) => {\n//                 if (ref.current && i !== index) {\n//                     ref.current.style.opacity = '0.7';\n//                 }\n//             });\n//         };\n\n//         const handleMouseOut = () => {\n//             // Rétablir l'opacité à 1 pour tous les carrousels\n//             carouselRefs.current.forEach(ref => {\n//                 if (ref.current) {\n//                     ref.current.style.opacity = '1';\n//                 }\n//             });\n//         };\n\n//         // Ajouter les événements de survol et de sortie pour chaque carrousel\n//         carouselRefs.current.forEach((ref, index) => {\n//             if (ref.current) {\n//                 ref.current.addEventListener('mouseover', () => handleMouseOver(index));\n//                 ref.current.addEventListener('mouseout', handleMouseOut);\n//             }\n//         });\n\n//         // Nettoyage des événements lors du démontage du composant\n//         return () => {\n//             carouselRefs.current.forEach((ref, index) => {\n//                 if (ref.current) {\n//                     ref.current.removeEventListener('mouseover', () => handleMouseOver(index));\n//                     ref.current.removeEventListener('mouseout', handleMouseOut);\n//                 }\n//             });\n//         };\n//     }, [sections]);\n\n//     return (\n//         <div className=\"menu_page\" ref={menuRef}>\n//             <Split1 />\n//             {sections.map((section, index) => (\n//                 <React.Fragment key={section.titre}>\n//                     <div \n//                         className=\"carrousel\" \n//                         ref={carouselRefs.current[index]} // Référence assignée\n//                         id={section.titre}\n//                     >\n//                         {Array(12).fill(null).map((_, i) => (\n//                             <Menu_page_item key={i} titre={section.titre} />\n//                         ))}\n//                     </div>\n//                     {index < sections.length - 1 && <span className=\"split2\" />}\n//                 </React.Fragment>\n//             ))}\n//             <Split1 />\n//         </div>\n//     );\n// };\n\n// export default Menu_page;\n\n// import React from 'react';\n// import { useEffect, useRef, useState } from \"react\";\n// import data from '../data/data.json';\n\n// const Split1 = () => {\n//     return (\n//         <div className=\"split1\">\n//             <span></span>\n//             <p>Cliquez pour découvrir</p>\n//             <span></span>\n//         </div>\n//     );\n// };\n\n// const Menu_page_item = ({ titre }) => {\n//     return (\n//         <div className='menu_page_item'>\n//             <span></span>\n//             <p>{titre}</p>\n//         </div>\n//     );\n// };\n\n// const Menu_page = () => {\n//     const menuRef = useRef(null);\n//     const [isVisible, setIsVisible] = useState(false);\n//     const [startY, setStartY] = useState(0);\n\n//     // Récupérer les sections depuis le JSON\n//     const sections = data.fr.sections;\n\n//     // Création des refs en utilisant un objet\n//     const carouselRefs = useRef(\n//         Object.fromEntries(sections.map(section => [section.titre, { current: null }]))\n//     );\n//     const velocityRefs = useRef(\n//         Object.fromEntries(sections.map(section => [section.titre, 0]))\n//     );\n\n//     useEffect(() => {\n//         const observer = new IntersectionObserver(\n//             (entries) => {\n//                 entries.forEach(entry => {\n//                     if (entry.isIntersecting) {\n//                         setIsVisible(true);\n//                         setStartY(window.scrollY);\n//                     } else {\n//                         setIsVisible(false);\n//                     }\n//                 });\n//             },\n//             { threshold: 0.1 }\n//         );\n\n//         if (menuRef.current) {\n//             observer.observe(menuRef.current);\n//         }\n\n//         return () => {\n//             if (menuRef.current) {\n//                 observer.unobserve(menuRef.current);\n//             }\n//         };\n//     }, []);\n\n//     useEffect(() => {\n//         if (!isVisible) return;\n\n//         let animationFrameId;\n//         let lastScrollY = window.scrollY;\n\n//         const smoothScroll = () => {\n//             const relativeScrollY = window.scrollY - startY;\n//             const maxScroll = 1000;\n//             const boundedScrollY = Math.max(0, Math.min(relativeScrollY, maxScroll));\n\n//             sections.forEach((section, index) => {\n//                 const carousel = carouselRefs.current[section.titre].current;\n//                 if (!carousel) return;\n\n//                 const offset = -500 + (index * 100);\n//                 velocityRefs.current[section.titre] += \n//                     ((offset + boundedScrollY * 0.2) - parseFloat(carousel.style.transform?.replace('translateX(', '').replace('px)', '') || 0)) * 0.1;\n\n//                 velocityRefs.current[section.titre] *= 0.95;\n//                 carousel.style.transform = `translateX(${velocityRefs.current[section.titre]}px)`;\n//             });\n\n//             const hasMovement = Object.values(velocityRefs.current).some(\n//                 velocity => Math.abs(velocity) > 0.1\n//             );\n\n//             if (hasMovement) {\n//                 animationFrameId = requestAnimationFrame(smoothScroll);\n//             }\n\n//             lastScrollY = window.scrollY;\n//         };\n\n//         const startSmoothScroll = () => {\n//             if (isVisible) {\n//                 cancelAnimationFrame(animationFrameId);\n//                 animationFrameId = requestAnimationFrame(smoothScroll);\n//             }\n//         };\n\n//         window.addEventListener('scroll', startSmoothScroll);\n\n//         const updateOpacity = (targetId) => {\n//             sections.forEach(section => {\n//                 const carousel = carouselRefs.current[section.titre].current;\n//                 if (carousel && carousel.id !== targetId) {\n//                     carousel.style.opacity = '0.7';\n//                 }\n//             });\n//         };\n\n//         const resetOpacity = () => {\n//             sections.forEach(section => {\n//                 const carousel = carouselRefs.current[section.titre].current;\n//                 if (carousel) {\n//                     carousel.style.opacity = '1';\n//                 }\n//             });\n//         };\n\n//         sections.forEach(section => {\n//             const carousel = carouselRefs.current[section.titre].current;\n//             if (carousel) {\n//                 carousel.addEventListener('mouseover', () => updateOpacity(section.titre));\n//                 //carousel.addEventListener('mouseout', resetOpacity);\n//             }\n//         });\n\n//         return () => {\n//             window.removeEventListener('scroll', startSmoothScroll);\n//             cancelAnimationFrame(animationFrameId);\n//             sections.forEach(section => {\n//                 const carousel = carouselRefs.current[section.titre].current;\n//                 if (carousel) {\n//                     carousel.removeEventListener('mouseover', () => updateOpacity(section.titre));\n//                     carousel.removeEventListener('mouseout', resetOpacity);\n//                 }\n//             });\n//         };\n//     }, [isVisible, startY, sections]);\n\n//     return (\n//         <div className=\"menu_page\" ref={menuRef}>\n//             <Split1 />\n//             {sections.map((section, index) => (\n//                 <React.Fragment key={section.titre}>\n//                     <div \n//                         className=\"carrousel\" \n//                         ref={el => carouselRefs.current[section.titre].current = el}\n//                         id={section.titre}\n//                     >\n//                         {Array(12).fill(null).map((_, i) => (\n//                             <Menu_page_item key={i} titre={section.titre} />\n//                         ))}\n//                     </div>\n//                     {index < sections.length - 1 && <span className=\"split2\" />}\n//                 </React.Fragment>\n//             ))}\n//             <Split1 />\n//         </div>\n//     );\n// };\n\n// export default Menu_page;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Split1\");\n$RefreshReg$(_c2, \"Menu_page_item\");\n$RefreshReg$(_c3, \"Menu_page\");","map":{"version":3,"names":["React","useRef","useEffect","useState","data","jsxDEV","_jsxDEV","Split1","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Menu_page_item","titre","_c2","Menu_page","_s","menuRef","scrollY","setScrollY","isVisible","setIsVisible","sections","fr","carouselRefs","map","createRef","handleScroll","window","addEventListener","removeEventListener","observer","IntersectionObserver","entry","isIntersecting","threshold","current","observe","unobserve","forEach","ref","index","offset","translateXValue","style","transform","handleMouseOver","i","opacity","handleMouseOut","section","Fragment","id","Array","fill","_","length","_c3","$RefreshReg$"],"sources":["/Users/tancredegorand/Documents/TANCREDE/1-LOCAL/Portfolio/portfolio_2025/src/component/Menu_page.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport data from '../data/data.json';\n\nconst Split1 = () => {\n    return (\n        <div className=\"split1\">\n            <span></span>\n            <p>Cliquez pour découvrir</p>\n            <span></span>\n        </div>\n    );\n};\n\nconst Menu_page_item = ({ titre }) => {\n    return (\n        <div className='menu_page_item'>\n            <span></span>\n            <p>{titre}</p>\n        </div>\n    );\n};\n\nconst Menu_page = () => {\n    const menuRef = useRef(null);\n    const [scrollY, setScrollY] = useState(0);\n    const [isVisible, setIsVisible] = useState(false); // État pour savoir si le composant est visible\n    \n    // Récupérer les sections depuis le JSON\n    const sections = data.fr.sections;\n    \n    // Création des refs pour chaque carrousel\n    const carouselRefs = useRef(sections.map(() => React.createRef()));\n\n    // Gestion du scrollY pour déplacer les carrousels seulement si le composant est visible\n    useEffect(() => {\n        const handleScroll = () => {\n            if (isVisible) { // Ne mettre à jour scrollY que si le composant est visible\n                setScrollY(window.scrollY);\n            }\n        };\n\n        window.addEventListener('scroll', handleScroll);\n\n        // Nettoyage de l'événement de scroll à la destruction du composant\n        return () => {\n            window.removeEventListener('scroll', handleScroll);\n        };\n    }, [isVisible]); // L'effet dépend de isVisible\n\n    useEffect(() => {\n        // Initialiser l'IntersectionObserver pour détecter la visibilité du composant\n        const observer = new IntersectionObserver(\n            ([entry]) => {\n                if (entry.isIntersecting) {\n                    // Le composant Menu_page est visible, on active la logique de défilement\n                    setIsVisible(true);\n                } else {\n                    // Le composant Menu_page est hors de l'écran, on désactive le défilement\n                    setIsVisible(false);\n                }\n            },\n            { threshold: 0.5 } // Déclenche lorsque 50% du composant est visible\n        );\n\n        if (menuRef.current) {\n            observer.observe(menuRef.current); // Observer le composant Menu_page\n        }\n\n        // Nettoyage de l'observer lors du démontage du composant\n        return () => {\n            if (menuRef.current) {\n                observer.unobserve(menuRef.current);\n            }\n        };\n    }, []);\n\n    useEffect(() => {\n        // Appliquer un décalage horizontal basé sur scrollY à chaque carrousel\n        carouselRefs.current.forEach((ref, index) => {\n            if (ref.current) {\n                const offset = index * 100; // Crée un effet de décalage en fonction de l'index\n                const translateXValue = -scrollY + offset;\n                ref.current.style.transform = `translateX(${translateXValue}px)`;\n            }\n        });\n    }, [scrollY, sections]); // L'effet se déclenche à chaque changement de scrollY ou sections\n\n    const handleMouseOver = (index) => {\n        // Mettre opacité à 0.7 pour tous les carrousels sauf celui survolé\n        carouselRefs.current.forEach((ref, i) => {\n            if (ref.current && i !== index) {\n                ref.current.style.opacity = '0.7';\n            }\n        });\n    };\n\n    const handleMouseOut = () => {\n        // Rétablir l'opacité à 1 pour tous les carrousels\n        carouselRefs.current.forEach(ref => {\n            if (ref.current) {\n                ref.current.style.opacity = '1';\n            }\n        });\n    };\n\n    useEffect(() => {\n        // Ajouter les événements de survol et de sortie pour chaque carrousel\n        carouselRefs.current.forEach((ref, index) => {\n            if (ref.current) {\n                ref.current.addEventListener('mouseover', () => handleMouseOver(index));\n                ref.current.addEventListener('mouseout', handleMouseOut);\n            }\n        });\n\n        // Nettoyage des événements lors du démontage du composant\n        return () => {\n            carouselRefs.current.forEach((ref, index) => {\n                if (ref.current) {\n                    ref.current.removeEventListener('mouseover', () => handleMouseOver(index));\n                    ref.current.removeEventListener('mouseout', handleMouseOut);\n                }\n            });\n        };\n    }, [sections]);\n\n    return (\n        <div className=\"menu_page\" ref={menuRef}>\n            <Split1 />\n            {sections.map((section, index) => (\n                <React.Fragment key={section.titre}>\n                    <div \n                        className=\"carrousel\" \n                        ref={carouselRefs.current[index]} // Référence assignée\n                        id={section.titre}\n                    >\n                        {Array(12).fill(null).map((_, i) => (\n                            <Menu_page_item key={i} titre={section.titre} />\n                        ))}\n                    </div>\n                    {index < sections.length - 1 && <span className=\"split2\" />}\n                </React.Fragment>\n            ))}\n            <Split1 />\n        </div>\n    );\n};\n\nexport default Menu_page;\n\n\n\n\n\n\n\n// import React, { useRef, useEffect } from \"react\";\n// import data from '../data/data.json';\n\n// const Split1 = () => {\n//     return (\n//         <div className=\"split1\">\n//             <span></span>\n//             <p>Cliquez pour découvrir</p>\n//             <span></span>\n//         </div>\n//     );\n// };\n\n// const Menu_page_item = ({ titre }) => {\n//     return (\n//         <div className='menu_page_item'>\n//             <span></span>\n//             <p>{titre}</p>\n//         </div>\n//     );\n// };\n\n// const Menu_page = () => {\n//     const menuRef = useRef(null);\n    \n//     // Récupérer les sections depuis le JSON\n//     const sections = data.fr.sections;\n    \n//     // Création des refs pour chaque carrousel\n//     const carouselRefs = useRef(sections.map(() => React.createRef()));\n\n//     useEffect(() => {\n//         const handleMouseOver = (index) => {\n//             // Mettre opacité à 0.7 pour tous les carrousels sauf celui survolé\n//             carouselRefs.current.forEach((ref, i) => {\n//                 if (ref.current && i !== index) {\n//                     ref.current.style.opacity = '0.7';\n//                 }\n//             });\n//         };\n\n//         const handleMouseOut = () => {\n//             // Rétablir l'opacité à 1 pour tous les carrousels\n//             carouselRefs.current.forEach(ref => {\n//                 if (ref.current) {\n//                     ref.current.style.opacity = '1';\n//                 }\n//             });\n//         };\n\n//         // Ajouter les événements de survol et de sortie pour chaque carrousel\n//         carouselRefs.current.forEach((ref, index) => {\n//             if (ref.current) {\n//                 ref.current.addEventListener('mouseover', () => handleMouseOver(index));\n//                 ref.current.addEventListener('mouseout', handleMouseOut);\n//             }\n//         });\n\n//         // Nettoyage des événements lors du démontage du composant\n//         return () => {\n//             carouselRefs.current.forEach((ref, index) => {\n//                 if (ref.current) {\n//                     ref.current.removeEventListener('mouseover', () => handleMouseOver(index));\n//                     ref.current.removeEventListener('mouseout', handleMouseOut);\n//                 }\n//             });\n//         };\n//     }, [sections]);\n\n//     return (\n//         <div className=\"menu_page\" ref={menuRef}>\n//             <Split1 />\n//             {sections.map((section, index) => (\n//                 <React.Fragment key={section.titre}>\n//                     <div \n//                         className=\"carrousel\" \n//                         ref={carouselRefs.current[index]} // Référence assignée\n//                         id={section.titre}\n//                     >\n//                         {Array(12).fill(null).map((_, i) => (\n//                             <Menu_page_item key={i} titre={section.titre} />\n//                         ))}\n//                     </div>\n//                     {index < sections.length - 1 && <span className=\"split2\" />}\n//                 </React.Fragment>\n//             ))}\n//             <Split1 />\n//         </div>\n//     );\n// };\n\n// export default Menu_page;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React from 'react';\n// import { useEffect, useRef, useState } from \"react\";\n// import data from '../data/data.json';\n\n// const Split1 = () => {\n//     return (\n//         <div className=\"split1\">\n//             <span></span>\n//             <p>Cliquez pour découvrir</p>\n//             <span></span>\n//         </div>\n//     );\n// };\n\n// const Menu_page_item = ({ titre }) => {\n//     return (\n//         <div className='menu_page_item'>\n//             <span></span>\n//             <p>{titre}</p>\n//         </div>\n//     );\n// };\n\n// const Menu_page = () => {\n//     const menuRef = useRef(null);\n//     const [isVisible, setIsVisible] = useState(false);\n//     const [startY, setStartY] = useState(0);\n    \n//     // Récupérer les sections depuis le JSON\n//     const sections = data.fr.sections;\n    \n//     // Création des refs en utilisant un objet\n//     const carouselRefs = useRef(\n//         Object.fromEntries(sections.map(section => [section.titre, { current: null }]))\n//     );\n//     const velocityRefs = useRef(\n//         Object.fromEntries(sections.map(section => [section.titre, 0]))\n//     );\n\n//     useEffect(() => {\n//         const observer = new IntersectionObserver(\n//             (entries) => {\n//                 entries.forEach(entry => {\n//                     if (entry.isIntersecting) {\n//                         setIsVisible(true);\n//                         setStartY(window.scrollY);\n//                     } else {\n//                         setIsVisible(false);\n//                     }\n//                 });\n//             },\n//             { threshold: 0.1 }\n//         );\n\n//         if (menuRef.current) {\n//             observer.observe(menuRef.current);\n//         }\n\n//         return () => {\n//             if (menuRef.current) {\n//                 observer.unobserve(menuRef.current);\n//             }\n//         };\n//     }, []);\n\n//     useEffect(() => {\n//         if (!isVisible) return;\n\n//         let animationFrameId;\n//         let lastScrollY = window.scrollY;\n\n//         const smoothScroll = () => {\n//             const relativeScrollY = window.scrollY - startY;\n//             const maxScroll = 1000;\n//             const boundedScrollY = Math.max(0, Math.min(relativeScrollY, maxScroll));\n\n//             sections.forEach((section, index) => {\n//                 const carousel = carouselRefs.current[section.titre].current;\n//                 if (!carousel) return;\n\n//                 const offset = -500 + (index * 100);\n//                 velocityRefs.current[section.titre] += \n//                     ((offset + boundedScrollY * 0.2) - parseFloat(carousel.style.transform?.replace('translateX(', '').replace('px)', '') || 0)) * 0.1;\n                \n//                 velocityRefs.current[section.titre] *= 0.95;\n//                 carousel.style.transform = `translateX(${velocityRefs.current[section.titre]}px)`;\n//             });\n\n//             const hasMovement = Object.values(velocityRefs.current).some(\n//                 velocity => Math.abs(velocity) > 0.1\n//             );\n\n//             if (hasMovement) {\n//                 animationFrameId = requestAnimationFrame(smoothScroll);\n//             }\n\n//             lastScrollY = window.scrollY;\n//         };\n\n//         const startSmoothScroll = () => {\n//             if (isVisible) {\n//                 cancelAnimationFrame(animationFrameId);\n//                 animationFrameId = requestAnimationFrame(smoothScroll);\n//             }\n//         };\n\n//         window.addEventListener('scroll', startSmoothScroll);\n\n//         const updateOpacity = (targetId) => {\n//             sections.forEach(section => {\n//                 const carousel = carouselRefs.current[section.titre].current;\n//                 if (carousel && carousel.id !== targetId) {\n//                     carousel.style.opacity = '0.7';\n//                 }\n//             });\n//         };\n\n//         const resetOpacity = () => {\n//             sections.forEach(section => {\n//                 const carousel = carouselRefs.current[section.titre].current;\n//                 if (carousel) {\n//                     carousel.style.opacity = '1';\n//                 }\n//             });\n//         };\n\n//         sections.forEach(section => {\n//             const carousel = carouselRefs.current[section.titre].current;\n//             if (carousel) {\n//                 carousel.addEventListener('mouseover', () => updateOpacity(section.titre));\n//                 //carousel.addEventListener('mouseout', resetOpacity);\n//             }\n//         });\n\n//         return () => {\n//             window.removeEventListener('scroll', startSmoothScroll);\n//             cancelAnimationFrame(animationFrameId);\n//             sections.forEach(section => {\n//                 const carousel = carouselRefs.current[section.titre].current;\n//                 if (carousel) {\n//                     carousel.removeEventListener('mouseover', () => updateOpacity(section.titre));\n//                     carousel.removeEventListener('mouseout', resetOpacity);\n//                 }\n//             });\n//         };\n//     }, [isVisible, startY, sections]);\n\n//     return (\n//         <div className=\"menu_page\" ref={menuRef}>\n//             <Split1 />\n//             {sections.map((section, index) => (\n//                 <React.Fragment key={section.titre}>\n//                     <div \n//                         className=\"carrousel\" \n//                         ref={el => carouselRefs.current[section.titre].current = el}\n//                         id={section.titre}\n//                     >\n//                         {Array(12).fill(null).map((_, i) => (\n//                             <Menu_page_item key={i} titre={section.titre} />\n//                         ))}\n//                     </div>\n//                     {index < sections.length - 1 && <span className=\"split2\" />}\n//                 </React.Fragment>\n//             ))}\n//             <Split1 />\n//         </div>\n//     );\n// };\n\n// export default Menu_page;\n\n\n\n\n\n\n\n\n\n\n"],"mappings":"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":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}