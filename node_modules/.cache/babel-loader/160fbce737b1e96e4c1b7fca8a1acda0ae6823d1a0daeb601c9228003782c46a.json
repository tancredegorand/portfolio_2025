{"ast":null,"code":"// import React, { useEffect, useRef, useState } from \"react\";\n// import data from \"../data/data.json\";\n\n// const Split1 = () => (\n//     <div className=\"split1\">\n//         <span></span>\n//         <p>Cliquez pour découvrir</p>\n//         <span></span>\n//     </div>\n// );\n\n// const Menu_page_item = ({ titre }) => (\n//     <div className=\"menu_page_item\">\n//         <span></span>\n//         <p>{titre}</p>\n//     </div>\n// );\n\n// const Menu_page = () => {\n//     const menuRef = useRef(null);\n//     const [isVisible, setIsVisible] = useState(false);\n//     const [startY, setStartY] = useState(0);\n\n//     const sections = data.fr.sections;\n\n//     const carouselRefs = useRef({});\n//     const velocityRefs = useRef({});\n\n//     useEffect(() => {\n//         console.log(\"Références des carrousels :\", carouselRefs.current);\n//     }, []);\n\n//     useEffect(() => {\n//         const observer = new IntersectionObserver(\n//             (entries) => {\n//                 entries.forEach((entry) => {\n//                     if (entry.isIntersecting) {\n//                         setIsVisible(true);\n//                         setStartY(window.scrollY);\n//                     } else {\n//                         setIsVisible(false);\n//                     }\n//                 });\n//             },\n//             { threshold: 0.1 }\n//         );\n\n//         if (menuRef.current) {\n//             observer.observe(menuRef.current);\n//         }\n\n//         return () => {\n//             if (menuRef.current) {\n//                 observer.unobserve(menuRef.current);\n//             }\n//         };\n//     }, []);\n\n//     useEffect(() => {\n//         if (!isVisible) return;\n\n//         let animationFrameId;\n\n//         const smoothScroll = () => {\n//             const relativeScrollY = window.scrollY - startY;\n//             const maxScroll = 1000;\n//             const boundedScrollY = Math.max(0, Math.min(relativeScrollY, maxScroll));\n//             const scrollFactor = 0.2;\n\n//             sections.forEach((section, index) => {\n//                 const carousel = carouselRefs.current[section.titre]?.current;\n//                 if (!carousel) return;\n\n//                 const isMovingRight = index % 2 === 1;\n//                 const direction = isMovingRight ? 1 : -1;\n//                 const baseOffset = isMovingRight ? 600 : -600;\n//                 const targetPosition = baseOffset + boundedScrollY * scrollFactor * direction;\n//                 const currentPosition = parseFloat(carousel.style.transform?.replace(\"translateX(\", \"\").replace(\"px)\", \"\") || 0);\n\n//                 velocityRefs.current[section.titre] = velocityRefs.current[section.titre] || 0;\n//                 velocityRefs.current[section.titre] += (targetPosition - currentPosition) * 0.08;\n//                 velocityRefs.current[section.titre] *= 0.92;\n\n//                 carousel.style.transform = `translateX(${velocityRefs.current[section.titre]}px)`;\n//             });\n\n//             const hasMovement = Object.values(velocityRefs.current).some(\n//                 (velocity) => Math.abs(velocity) > 0.05\n//             );\n\n//             if (hasMovement) {\n//                 animationFrameId = requestAnimationFrame(smoothScroll);\n//             }\n//         };\n\n//         const startSmoothScroll = () => {\n//             if (isVisible) {\n//                 cancelAnimationFrame(animationFrameId);\n//                 animationFrameId = requestAnimationFrame(smoothScroll);\n//             }\n//         };\n\n//         window.addEventListener(\"scroll\", startSmoothScroll);\n\n//         return () => {\n//             window.removeEventListener(\"scroll\", startSmoothScroll);\n//             cancelAnimationFrame(animationFrameId);\n//         };\n//     }, [isVisible, startY, sections]);\n\n//     return (\n//         <div className=\"menu_page\" ref={menuRef}>\n//             <Split1 />\n//             {sections.map((section, index) => (\n//                 <React.Fragment key={section.titre}>\n//                     <div\n//                         className=\"carrousel\"\n//                         ref={(el) => {\n//                             if (el) {\n//                                 carouselRefs.current[section.titre] = { current: el };\n//                             }\n//                         }}\n//                         id={section.titre}\n//                     >\n//                         {Array(12)\n//                             .fill(null)\n//                             .map((_, i) => (\n//                                 <Menu_page_item key={i} titre={section.titre} />\n//                             ))}\n//                     </div>\n//                     {index < sections.length - 1 && <span className=\"split2\" />}\n//                 </React.Fragment>\n//             ))}\n//             <Split1 />\n//         </div>\n//     );\n// };\n\n// export default Menu_page;","map":{"version":3,"names":[],"sources":["/Users/tancredegorand/Documents/TANCREDE/1-LOCAL/Portfolio/portfolio_2025/src/component/Menu_page.js"],"sourcesContent":["// import React, { useEffect, useRef, useState } from \"react\";\n// import data from \"../data/data.json\";\n\n// const Split1 = () => (\n//     <div className=\"split1\">\n//         <span></span>\n//         <p>Cliquez pour découvrir</p>\n//         <span></span>\n//     </div>\n// );\n\n// const Menu_page_item = ({ titre }) => (\n//     <div className=\"menu_page_item\">\n//         <span></span>\n//         <p>{titre}</p>\n//     </div>\n// );\n\n// const Menu_page = () => {\n//     const menuRef = useRef(null);\n//     const [isVisible, setIsVisible] = useState(false);\n//     const [startY, setStartY] = useState(0);\n\n//     const sections = data.fr.sections;\n    \n//     const carouselRefs = useRef({});\n//     const velocityRefs = useRef({});\n\n//     useEffect(() => {\n//         console.log(\"Références des carrousels :\", carouselRefs.current);\n//     }, []);\n\n//     useEffect(() => {\n//         const observer = new IntersectionObserver(\n//             (entries) => {\n//                 entries.forEach((entry) => {\n//                     if (entry.isIntersecting) {\n//                         setIsVisible(true);\n//                         setStartY(window.scrollY);\n//                     } else {\n//                         setIsVisible(false);\n//                     }\n//                 });\n//             },\n//             { threshold: 0.1 }\n//         );\n\n//         if (menuRef.current) {\n//             observer.observe(menuRef.current);\n//         }\n\n//         return () => {\n//             if (menuRef.current) {\n//                 observer.unobserve(menuRef.current);\n//             }\n//         };\n//     }, []);\n\n//     useEffect(() => {\n//         if (!isVisible) return;\n\n//         let animationFrameId;\n\n//         const smoothScroll = () => {\n//             const relativeScrollY = window.scrollY - startY;\n//             const maxScroll = 1000;\n//             const boundedScrollY = Math.max(0, Math.min(relativeScrollY, maxScroll));\n//             const scrollFactor = 0.2;\n\n//             sections.forEach((section, index) => {\n//                 const carousel = carouselRefs.current[section.titre]?.current;\n//                 if (!carousel) return;\n\n//                 const isMovingRight = index % 2 === 1;\n//                 const direction = isMovingRight ? 1 : -1;\n//                 const baseOffset = isMovingRight ? 600 : -600;\n//                 const targetPosition = baseOffset + boundedScrollY * scrollFactor * direction;\n//                 const currentPosition = parseFloat(carousel.style.transform?.replace(\"translateX(\", \"\").replace(\"px)\", \"\") || 0);\n\n//                 velocityRefs.current[section.titre] = velocityRefs.current[section.titre] || 0;\n//                 velocityRefs.current[section.titre] += (targetPosition - currentPosition) * 0.08;\n//                 velocityRefs.current[section.titre] *= 0.92;\n\n//                 carousel.style.transform = `translateX(${velocityRefs.current[section.titre]}px)`;\n//             });\n\n//             const hasMovement = Object.values(velocityRefs.current).some(\n//                 (velocity) => Math.abs(velocity) > 0.05\n//             );\n\n//             if (hasMovement) {\n//                 animationFrameId = requestAnimationFrame(smoothScroll);\n//             }\n//         };\n\n//         const startSmoothScroll = () => {\n//             if (isVisible) {\n//                 cancelAnimationFrame(animationFrameId);\n//                 animationFrameId = requestAnimationFrame(smoothScroll);\n//             }\n//         };\n\n//         window.addEventListener(\"scroll\", startSmoothScroll);\n\n//         return () => {\n//             window.removeEventListener(\"scroll\", startSmoothScroll);\n//             cancelAnimationFrame(animationFrameId);\n//         };\n//     }, [isVisible, startY, sections]);\n\n//     return (\n//         <div className=\"menu_page\" ref={menuRef}>\n//             <Split1 />\n//             {sections.map((section, index) => (\n//                 <React.Fragment key={section.titre}>\n//                     <div\n//                         className=\"carrousel\"\n//                         ref={(el) => {\n//                             if (el) {\n//                                 carouselRefs.current[section.titre] = { current: el };\n//                             }\n//                         }}\n//                         id={section.titre}\n//                     >\n//                         {Array(12)\n//                             .fill(null)\n//                             .map((_, i) => (\n//                                 <Menu_page_item key={i} titre={section.titre} />\n//                             ))}\n//                     </div>\n//                     {index < sections.length - 1 && <span className=\"split2\" />}\n//                 </React.Fragment>\n//             ))}\n//             <Split1 />\n//         </div>\n//     );\n// };\n\n// export default Menu_page;\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}